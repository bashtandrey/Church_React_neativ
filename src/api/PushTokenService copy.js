
import * as Notifications from "expo-notifications";
import { apiRequest } from "./globalFuntions.js";
import { getToken } from "./tokenStorage.js";
import * as Device from "expo-device";
if (!Device.isDevice) {
  console.warn("pushTokenService: –ü—Ä–æ–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ push-—Ç–æ–∫–µ–Ω–∞ ‚Äî –Ω–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ");

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º "–ø—É—Å—Ç–æ–π" —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –Ω–µ –ø–∞–¥–∞–ª –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ —ç–º—É–ª—è—Ç–æ—Ä–µ/–≤ web
  Notifications.getExpoPushTokenAsync = async () => ({ data: null });

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—É—Å—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const originalFetch = globalThis.fetch;
  globalThis.fetch = async (input, init) => {
    try {
      const url = typeof input === "string" ? input : input?.url || "";
      if (url.includes("/api/v1/notifications/register-token")) {
        if (init?.body) {
          const parsed = JSON.parse(init.body);
          if (!parsed?.token) {
            // –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            return {
              ok: true,
              status: 204,
              json: async () => ({}),
            };
          }
        }
      }
    } catch (e) {
      // fallback to real fetch on any error
    }
    return originalFetch(input, init);
  };
}
export async function registerAndSendPushToken(data) {
  const { userId } = data;
  try {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;

    if (existingStatus !== "granted") {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }

    if (finalStatus !== "granted") {
      console.warn("pushTokenService: –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
      return;
    }

    const tokenData = await Notifications.getExpoPushTokenAsync();
    const token = tokenData.data;
    console.log("üì≤ Push Token:", token);
    console.log("üë§ User ID:", userId);

    const accessToken = await getToken();

    const headers = {
      "Content-Type": "application/json",
    };
    if (accessToken) {
      headers.Authorization = `Bearer ${accessToken}`;
    }

    await apiRequest("/api/v1/notifications/register-token", {
      method: "POST",
      headers,
      body: JSON.stringify({ token, userId }),
    });
  } catch (error) {
    console.warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ push-—Ç–æ–∫–µ–Ω–∞:", error.message);
  }
}
export async function getPushPermissionStatus() {
  try {
    const { status } = await Notifications.getPermissionsAsync();
    return status === "granted";
  } catch (error) {
    console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –ø—É—à–∏:", error.message);
    return null;
  }
}