// pushTokenService.js
import * as Notifications from "expo-notifications";
import * as Device from "expo-device";
import Constants from "expo-constants";
import { Platform } from "react-native";
import * as SecureStore from 'expo-secure-store';
import { apiRequest } from "./globalFuntions.js";
import { getToken } from "./tokenStorage.js";

const SENT_CACHE_KEY = "pushToken.sent"; // { token: string, userId: number|null }

async function ensureAndroidChannel() {
  if (Platform.OS !== "android") return;
  await Notifications.setNotificationChannelAsync("default", {
    name: "default",
    importance: Notifications.AndroidImportance.MAX,
  });
}

function getProjectId() {
  // Expo SDK 49+: –±–µ—Ä—ë–º –∏–∑ EAS, –µ—Å–ª–∏ –µ—Å—Ç—å
  // eslint-disable-next-line no-undef
  return Constants?.easConfig?.projectId || Constants?.expoConfig?.extra?.eas?.projectId;
}

async function readSentCache() {
  const raw = await SecureStore.getItemAsync(SENT_CACHE_KEY);
  return raw ? JSON.parse(raw) : null;
}
async function writeSentCache(token, userId) {
  await SecureStore.setItemAsync(SENT_CACHE_KEY, JSON.stringify({ token, userId }));
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
 * data = { userId?: number|null }
 * - userId –º–æ–∂–µ—Ç –±—ã—Ç—å null/undefined (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
 * - –Ω–µ —à–ª—ë—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ, –µ—Å–ª–∏ (token, userId) –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
 */
export async function registerAndSendPushToken(data = {}) {
  const userId = data?.userId ?? null;
  console.log("registerAndSendPushToken: userId =", userId);
  try {
    if (!Device.isDevice) {
      console.warn("pushTokenService: —Å–∏–º—É–ª—è—Ç–æ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç push-—Ç–æ–∫–µ–Ω—ã");
      return null;
    }

    await ensureAndroidChannel();

    // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== "granted") {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== "granted") {
      console.warn("pushTokenService: –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
      return null;
    }

    // –ü–æ–ª—É—á–∞–µ–º Expo push token (—Å projectId, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    const projectId = getProjectId();
    const tokenData = await Notifications.getExpoPushTokenAsync(
      projectId ? { projectId } : undefined
    );
    const token = tokenData?.data;
    if (!token) {
      console.warn("pushTokenService: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å push-—Ç–æ–∫–µ–Ω");
      return null;
    }

    // –ù–µ —Å–ø–∞–º–∏–º —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –Ω—É–∂–¥—ã
    const prev = await readSentCache();
    if (prev && prev.token === token && prev.userId === userId) {
      return token;
    }

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å)
    const accessToken = await getToken();
    const headers = { "Content-Type": "application/json" };
    if (accessToken) headers.Authorization = `Bearer ${accessToken}`;

    // userId –º–æ–∂–µ—Ç –±—ã—Ç—å null ‚Äî —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞—Å—Ç/–æ–±–Ω–æ–≤–∏—Ç –∑–∞–ø–∏—Å—å –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await apiRequest("/api/v1/notifications/register-token", {
      method: "POST",
      headers,
      body: JSON.stringify({ token, userId }),
    });

    await writeSentCache(token, userId);
    // console.log("üì≤ Push Token:", token, "üë§ userId:", userId);
    return token;
  } catch (error) {
    console.warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ push-—Ç–æ–∫–µ–Ω–∞:", error?.message || error);
    return null;
  }
}

/** true/false/null ‚Äî –µ—Å—Ç—å –ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—É—à–∏ */
export async function getPushPermissionStatus() {
  try {
    const { status } = await Notifications.getPermissionsAsync();
    return status === "granted";
  } catch (error) {
    console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –ø—É—à–∏:", error?.message || error);
    return null;
  }
}